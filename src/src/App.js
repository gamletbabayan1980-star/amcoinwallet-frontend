import React, { useEffect, useState, useRef } from "react";
import TonWeb from "tonweb";
import bip39 from "bip39";

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ TonCenter
const TONCENTER_API = "https://toncenter.com/api/v2/jsonRPC";

// Jetton AMCOIN –º–∞—Å—Ç–µ—Ä-–∞–¥—Ä–µ—Å
const AMCOIN_MASTER = "EQAfysdj5lEz7LfEjybqSe-TFLdC1bMEW5zOvACn2xCjcIKV";

export default function App() {
  const [theme, setTheme] = useState("light");
  const [mnemonic, setMnemonic] = useState("");
  const [address, setAddress] = useState("‚Äî");
  const [tonBalance, setTonBalance] = useState("‚Äî");
  const [amcoinBalance, setAmcoinBalance] = useState("‚Äî");
  const [log, setLog] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const logRef = useRef(null);

  useEffect(() => {
    document.documentElement.setAttribute("data-theme", theme);
  }, [theme]);

  useEffect(() => {
    if (logRef.current) logRef.current.scrollTop = logRef.current.scrollHeight;
  }, [log]);

  function pushLog(...parts) {
    const t = new Date().toLocaleString();
    setLog(prev => [...prev, `[${t}] ${parts.join(" ")}`].slice(-200));
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–¥-—Ñ—Ä–∞–∑—ã
  async function handleGenerate() {
    const m = bip39.generateMnemonic(128);
    setMnemonic(m);
    pushLog("mnemonic —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω");
  }

  // –î–µ—Ä–∏–≤–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ mainnet
  async function handleDeriveAddress() {
    if (!mnemonic) return pushLog("–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ mnemonic");
    setIsLoading(true);
    try {
      const seed = await bip39.mnemonicToSeed(mnemonic);
      const keyPair = TonWeb.utils.nacl.sign.keyPair.fromSeed(seed.slice(0, 32));
      const tonweb = new TonWeb(new TonWeb.HttpProvider(TONCENTER_API));
      const wallet = new TonWeb.wallet.all.v3(tonweb.provider, { publicKey: keyPair.publicKey });
      const walletAddress = await wallet.getAddress();
      setAddress(walletAddress.toString(true, true, true));
      pushLog("–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω:", walletAddress.toString(true, true, true));
    } catch (e) { pushLog("–û—à–∏–±–∫–∞ –¥–µ—Ä–∏–≤–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞:", e.message); }
    finally { setIsLoading(false); }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ TON
  async function fetchTonBalance(addr) {
    try {
      const url = `https://toncenter.com/api/v2/getAddressInformation?address=${encodeURIComponent(addr)}`;
      const resp = await fetch(url);
      const data = await resp.json();
      return data.ok && data.result ? data.result.balance || 0 : 0;
    } catch (e) { pushLog("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ TON:", e.message); return 0; }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ AMCOIN (Jetton)
  async function fetchAmcoinBalance(addr) {
    try {
      const tonweb = new TonWeb(new TonWeb.HttpProvider(TONCENTER_API));
      const jettonWalletAddress = await TonWeb.token.jetton.getWalletAddress(AMCOIN_MASTER, addr);
      const balanceData = await TonWeb.token.jetton.getWalletData(tonweb.provider, jettonWalletAddress);
      return balanceData.balance;
    } catch (e) { pushLog("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AMCOIN –±–∞–ª–∞–Ω—Å–∞:", e.message); return 0; }
  }

  async function handleCheckBalances() {
    if (!address || address === "‚Äî") return pushLog("–°–Ω–∞—á–∞–ª–∞ –¥–µ—Ä–∏–≤–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å");
    setIsLoading(true);
    pushLog("–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è:", address);
    try {
      const tonBal = await fetchTonBalance(address);
      setTonBalance(`${tonBal} nanoTON`);
      const amBal = await fetchAmcoinBalance(address);
      setAmcoinBalance(amBal);
      pushLog("–ë–∞–ª–∞–Ω—Å TON:", tonBal, "AMCOIN:", amBal);
    } catch (e) { pushLog("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤:", e.message); }
    finally { setIsLoading(false); }
  }

  function handleClear() {
    setMnemonic(""); setAddress("‚Äî"); setTonBalance("‚Äî"); setAmcoinBalance("‚Äî"); pushLog("–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π");
  }

  return (
    <div className="min-h-screen p-6 bg-purple-900 text-white transition-colors">
      <div className="max-w-3xl mx-auto">
        <header className="mb-6 flex items-center justify-between">
          <h1 className="text-2xl font-semibold">üíé Amcoin Wallet</h1>
          <button onClick={() => setTheme(t => t === 'light' ? 'dark' : 'light')} className="px-3 py-2 rounded-lg border bg-purple-700">–¢–µ–º–∞</button>
        </header>

        <section className="mb-6 bg-purple-800 p-4 rounded-2xl shadow-sm border">
          <h2 className="text-lg font-semibold mb-2">üîë Seed</h2>
          <div className="flex gap-2 mb-2">
            <button onClick={handleGenerate} className="rounded-lg bg-purple-600 px-4 py-2">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å mnemonic</button>
            <button onClick={handleClear} className="rounded-lg bg-purple-600 px-4 py-2">–û—á–∏—Å—Ç–∏—Ç—å</button>
          </div>
          <textarea className="w-full p-3 rounded-lg bg-purple-700 border" rows={2} value={mnemonic} onChange={e => setMnemonic(e.target.value)} />
        </section>

        <section className="mb-6 bg-purple-800 p-4 rounded-2xl shadow-sm border">
          <h2 className="text-lg font-semibold mb-2">üìä Wallet Info</h2>
          <div className="mb-3">Address: <span className="font-mono">{address}</span></div>
          <div className="grid grid-cols-2 gap-3 mb-3">
            <div className="rounded-lg p-3 bg-purple-700 text-center">TON: {tonBalance}</div>
            <div className="rounded-lg p-3 bg-purple-700 text-center">AMCOIN: {amcoinBalance}</div>
          </div>
          <div className="flex gap-3">
            <button onClick={handleDeriveAddress} className="flex-1 rounded-lg bg-purple-600 px-4 py-2">–ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å</button>
            <button onClick={handleCheckBalances} className="rounded-lg bg-purple-600 px-4 py-2">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã</button>
          </div>
        </section>

        <section className="mb-6 bg-purple-800 p-4 rounded-2xl shadow-sm border">
          <h2 className="text-lg font-semibold mb-2">üìã –õ–æ–≥–∏</h2>
          <div ref={logRef} className="max-h-48 overflow-auto rounded-lg bg-purple-700 p-3 font-mono text-xs">
            {log.length === 0 ? <div className="text-gray-300">–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...</div> : log.map((l,i) => <div key={i}>{l}</div>)}
          </div>
        </section>
      </div>
    </div>
  );
}
